--Creat Table DDLs--
DROP TABLE IF EXISTS Users; 
DROP TABLE
DROP TABLE IF EXISTS Customers; 
DROP TABLE
DROP TABLE IF EXISTS Shoppers; 
DROP TABLE
DROP TABLE IF EXISTS Vehicles; 
DROP TABLE
DROP TABLE IF EXISTS Stores; 
DROP TABLE
DROP TABLE IF EXISTS Products;
DROP TABLE
DROP TABLE IF EXISTS Orders; 
DROP TABLE
DROP TABLE IF EXISTS UserPhone;
DROP TABLE
DROP TABLE IF EXISTS OrderItems; 
DROP TABLE
DROP TABLE IF EXISTS StockedBy; 
DROP TABLE
DROP TABLE IF EXISTS Own; 
DROP TABLE
DROP TABLE IF EXISTS WorkFor; 
DROP TABLE
-- Entity tables below: --
CREATE TABLE Users (
    user_id char(5) PRIMARY KEY, 
    email varchar(100), 
    first_name varchar(50) NOT NULL, 
    last_name varchar(50) NOT NULL
);
CREATE TABLE
CREATE TABLE Customers (
    user_id char(5) PRIMARY KEY
);
CREATE TABLE
CREATE TABLE Shoppers (
    user_id char(5) PRIMARY KEY,  
    capacity INTEGER 
);
CREATE TABLE
CREATE TABLE Vehicles (
    state char(2) NOT NULL, 
    license_plate varchar(15) NOT NULL, 
    year INTEGER, 
    model varchar(50), 
    make varchar(50) NOT NULL, 
    color varchar(10) NOT NULL,
    PRIMARY KEY (state, license_plate) 
);
CREATE TABLE
CREATE TABLE Stores (
    store_id varchar(5) PRIMARY KEY, 
    name varchar(50), 
    street varchar(100), 
    city varchar(50),
    state char(2), 
    zip_code char(5), 
    phone varchar(20), 
    categories varchar(300)
);
CREATE TABLE
CREATE TABLE Products(
    product_id char(5) PRIMARY KEY, 
    category varchar(100) NOT NULL, 
    name varchar(100) NOT NULL, 
    description varchar(100) NOT NULL, 
    list_price decimal(9,2) 
);
CREATE TABLE
CREATE TABLE Orders (
    order_id char(5) PRIMARY KEY, 
    total_price decimal(9,2), 
    time_placed timestamp, 
    pickup_time timestamp, 
    customer_id char(5), 
    shopper_id char(5), 
    state char(2), 
    license_plate varchar(15), 
    store_id char(5), 
    time_fulfilled timestamp
);
CREATE TABLE
-- Relationship tables below: --
CREATE TABLE UserPhone(
    user_id char(5), 
    type varchar(10), 
    number varchar(20),
    PRIMARY KEY (user_id, number)     
);
CREATE TABLE
CREATE TABLE OrderItems (
    item_id char(5), 
    qty INTEGER, 
    selling_price decimal(9, 2), 
    order_id char(5), 
    product_id char(5),
    PRIMARY KEY (item_id, order_id) 
); 
CREATE TABLE
CREATE TABLE StockedBy (
    product_id char(5), 
    store_id char(5), 
    qty INTEGER,
    PRIMARY KEY (product_id, store_id) 
);
CREATE TABLE
CREATE TABLE Own (
    state char(2), 
    license_plate char(15), 
    user_id char(5),
    PRIMARY KEY (state, license_plate, user_id) 
);
CREATE TABLE
CREATE TABLE WorkFor (
    store_id char(5), 
    shopper_id char(5),
    PRIMARY KEY (store_id, shopper_id) 
);
CREATE TABLE
-- Data Loading --
COPY Users (user_id, email, first_name, last_name)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/users.csv'
DELIMITER ','
CSV HEADER;
COPY 5000
COPY UserPhone(user_id, type, number)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/phones.csv'
DELIMITER ','
CSV HEADER;
COPY 5563
COPY Customers (user_id)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/customers.csv'
DELIMITER ','
CSV HEADER;
COPY 5000
COPY Shoppers (user_id, capacity)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/shoppers.csv'
DELIMITER ','
CSV HEADER;
COPY 1000
COPY Vehicles (state, license_plate, year, model, make, color)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/vehicles.csv'
DELIMITER ','
CSV HEADER;
COPY 5000
COPY Stores (store_id, name, street, city, state, zip_code, phone, categories)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/stores.csv'
DELIMITER ','
CSV HEADER;
COPY 400
COPY Products(product_id, category, name, description, list_price)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/products.csv'
DELIMITER ','
CSV HEADER;
COPY 541
COPY Orders (order_id, total_price, time_placed, pickup_time, customer_id, shopper_id, state, license_plate, store_id, time_fulfilled)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/orders.csv'
DELIMITER ','
CSV HEADER;
COPY 20000
COPY OrderItems (item_id, qty, selling_price, order_id, product_id)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/orderitems.csv'
DELIMITER ','
CSV HEADER;
COPY 28646
COPY StockedBy (product_id, store_id, qty)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/stockedby.csv'
DELIMITER ','
CSV HEADER;
COPY 15701
COPY Own (state, license_plate, user_id)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/own.csv'
DELIMITER ','
CSV HEADER;
COPY 5559
COPY WorkFor (store_id, shopper_id)
FROM '/Users/ricardo/Desktop/UCI Course/2021 Spring/CS122D/assignments/assignments1/ShopALot.com Data/workfor.csv'
DELIMITER ','
CSV HEADER;
COPY 1085
--Query Answers--
-- Problem A --
-- Write a query to print out how many stores, customers, 
-- and products there are in the given datasets - i.e., the total numbers of each.
SELECT COUNT(*) as stores_count
FROM stores
;
 stores_count 
--------------
          400
(1 row)

SELECT COUNT(*) as customers_count
FROM customers
;
 customers_count 
-----------------
            5000
(1 row)

SELECT COUNT(*) as products_count
FROM products
;
 products_count 
----------------
            541
(1 row)

-- Problem B --
-- The stores in Seattle,WA recently received a big flurry of orders and they need shoppers 
-- who are able to handle at least 5 orders at a time. List all the shoppers
-- with a capacity of at least 5 who work for one or more of the stores
-- located in Seattle, WA.
SELECT u.first_name, u.last_name 
FROM users u, shoppers s
WHERE 
    u.user_id = s.user_id 
    AND s.capacity >= 5 
    AND u.user_id in
    (
        SELECT DISTINCT w1.shopper_id
        FROM workfor w1 NATURAL JOIN stores s1
        WHERE s1.city = 'Seattle' AND s1.state = 'WA'
    )
;
 first_name | last_name 
------------+-----------
 Michele    | Griffin
(1 row)

-- Problem C --
-- You would like to find out about stores that are offering discounts amid the pandemic. 
-- For each store that has offered discounts, print out the number of unique 
-- products that were sold at discount prices (i.e., at a price where the selling 
-- price was lower than the list price) along with their store IDs and store names. 
-- Rank the results going from the largest number of such products to the lowest. 
-- Print the first 10 rows.
SELECT s.store_id, s.name, COUNT (DISTINCT oi.product_id) AS num_product 
FROM orderitems oi, products p, orders o, stores s
WHERE oi.order_id = o.order_id AND oi.product_id = p.product_id AND s.store_id = o.store_id AND oi.selling_price < p.list_price
GROUP BY s.store_id 
ORDER BY num_product DESC
LIMIT 10
;
 store_id |          name           | num_product 
----------+-------------------------+-------------
 1RMXY    | Cubbys                  |          79
 49TNX    | Irving Oil Corp         |          72
 17KE2    | Jackson Food Store      |          67
 2TM62    | Fasmart                 |          67
 14VAS    | Mapco                   |          67
 6Q67U    | Beasley Enterprises Inc |          62
 SCPDY    | Machias Mainway         |          62
 2K77Q    | Stripes Llc             |          61
 28JE8    | Baum's Mercantile       |          61
 QTB4W    | Machias Mainway         |          61
(10 rows)

-- Problem D --
-- At the beginning of the pandemic, the number of hoarders hit an all-time high!
-- Find all hoarding orders between 05/01/2020 (time placed) and 07/01/2020 (time placed).
-- An order with more than 25 of any particular item (e.g. toilet paper, hand sanitizer, ...) 
-- can be considered a hoarding order. Print the order ID, total price, and time placed for these orders.
SELECT o.order_id, o.total_price, o.time_placed
FROM orders o, orderitems oi
WHERE o.order_id = oi.order_id AND date '2020-05-01' <= o.time_placed::date AND o.time_placed::date <= date '2020-07-01'
GROUP BY o.order_id
HAVING SUM (oi.qty) > 25;
 order_id | total_price |     time_placed     
----------+-------------+---------------------
 0TFAH    |      379.64 | 2020-05-05 21:10:19
 0W1KD    |      201.03 | 2020-06-15 16:02:06
 1DQ5P    |      169.42 | 2020-06-10 17:42:07
 2DRZV    |      130.82 | 2020-06-18 12:40:09
 2KP5B    |       73.75 | 2020-05-05 15:44:03
 2MSAT    |       91.32 | 2020-05-26 15:24:48
 2S6NG    |      135.43 | 2020-06-29 10:29:28
 3RL30    |      254.78 | 2020-06-04 11:40:28
 575JY    |      129.42 | 2020-06-17 08:10:05
 5IZ2R    |      168.30 | 2020-06-09 02:42:38
 6AY91    |      298.66 | 2020-06-12 23:20:01
 6CDTH    |      312.26 | 2020-05-13 04:04:00
 6LK6A    |      213.24 | 2020-06-25 18:19:40
 8K05J    |      158.14 | 2020-06-07 14:47:42
 AKS0M    |      113.14 | 2020-06-20 14:52:50
 AMXWZ    |       84.40 | 2020-06-03 23:09:02
 BR60U    |      148.50 | 2020-06-06 01:18:48
 BTCAB    |      160.70 | 2020-06-17 00:55:48
 C53NR    |      225.64 | 2020-06-11 05:28:37
 CFTD5    |      245.00 | 2020-06-03 04:43:27
 COG62    |      364.08 | 2020-05-21 16:36:53
 D64AK    |      209.97 | 2020-05-06 21:20:25
 E7R8V    |      120.50 | 2020-05-25 08:12:21
 EXGJY    |      358.99 | 2020-05-01 09:55:15
 F3GOZ    |      155.22 | 2020-05-24 20:26:43
 FE65G    |      197.45 | 2020-06-14 16:54:16
 FSX1T    |      233.16 | 2020-06-13 08:05:36
 G8U7F    |      130.93 | 2020-06-27 17:39:40
 GW1ZB    |      147.08 | 2020-06-03 14:06:48
 H5FG3    |      176.06 | 2020-06-22 07:11:59
 H6YU4    |       49.27 | 2020-06-05 02:49:25
 HNPAH    |      188.12 | 2020-06-03 10:04:08
 HRJXE    |      205.37 | 2020-06-10 07:57:50
 HZ7I4    |      129.48 | 2020-06-28 06:03:36
 IFT2U    |      525.12 | 2020-05-26 20:55:33
 KDVSL    |      168.47 | 2020-05-11 13:09:58
 LVXVI    |      152.68 | 2020-05-06 06:22:42
 OCGMA    |      545.97 | 2020-06-21 09:47:09
 P412S    |      152.24 | 2020-06-26 12:06:56
 PLCEU    |      199.28 | 2020-07-01 03:26:31
 PZAUG    |      182.99 | 2020-05-29 17:25:06
 QF5KP    |      163.93 | 2020-05-04 09:30:04
 QSRGO    |      255.62 | 2020-06-15 08:41:08
 RHTE8    |      127.50 | 2020-06-20 02:44:27
 S0L3A    |      198.77 | 2020-05-18 01:50:12
 SW6PI    |      624.56 | 2020-05-05 09:54:58
 TRLUG    |      120.40 | 2020-05-31 19:59:45
 U5J7W    |      121.16 | 2020-05-21 10:29:05
 VE8PN    |      167.42 | 2020-06-20 21:31:26
 VEKS6    |      124.19 | 2020-05-15 03:36:11
 VLVUG    |       88.34 | 2020-06-28 03:47:48
 WRPJY    |      215.37 | 2020-06-18 10:18:22
 X3OIW    |      112.70 | 2020-06-28 05:38:16
 YRI35    |      293.95 | 2020-05-10 13:35:43
 ZREUO    |      518.79 | 2020-06-28 02:24:10
 ZWLJS    |      147.00 | 2020-05-19 11:24:28
(56 rows)

;
-- Problem E --
-- To study the users’ shopping habits, you want to explore trends in the average order’s total price during the peak of the pandemic. 
-- Suppose the peak date was 04/01/2020 (time placed). 
-- What was the average total price of all orders over the prior seven days? (Hint: Take advantage of the timestamp type.)
SELECT AVG(o.total_price)
FROM orders o
WHERE o.time_placed::date <= date '2020-04-01' AND o.time_placed >= (date '2020-04-01' - 7)
;
         avg         
---------------------
 54.1067483296213808
(1 row)

-- Problem F --
-- To study the users’ shopping habits, you want to explore trends in the average order’s total price during the peak of the pandemic. 
-- Suppose the peak date was 04/01/2020 (time placed). 
-- What was the average total price of all orders over the prior seven days? (Hint: Take advantage of the timestamp type.)
SELECT AVG(o.total_price)
FROM orders o
WHERE o.time_placed::date <= date '2020-04-01' AND o.time_placed >= (date '2020-04-01' - 7)
;
         avg         
---------------------
 54.1067483296213808
(1 row)

-- Problem G --
-- Continuing from the previous problem, use the UNNEST operator of PostgreSQL to create a normalized list with the store ID, 
-- the name, and the category for each store with a zip code of 44401. 
-- (Keep the list entries for each business together by using an ORDER BY clause.)
SELECT s.store_id, s.name, category
FROM stores s, UNNEST(string_to_array(s.categories, ', ')) as category
WHERE s.zip_code = '44401'
ORDER BY s.store_id
;
 store_id |             name             |        category        
----------+------------------------------+------------------------
 FNJXE    | Pump-N-Pantry Of NY          | Beverages
 FNJXE    | Pump-N-Pantry Of NY          | Deli
 FNJXE    | Pump-N-Pantry Of NY          | Frozen Foods
 FNJXE    | Pump-N-Pantry Of NY          | Fruits & Vegetables
 FNJXE    | Pump-N-Pantry Of NY          | Grains & Pasta & Sides
 FNJXE    | Pump-N-Pantry Of NY          | Personal Care & Health
 FNJXE    | Pump-N-Pantry Of NY          | Baby Care
 FNJXE    | Pump-N-Pantry Of NY          | Bread & Bakery
 FNJXE    | Pump-N-Pantry Of NY          | Breakfast & Cereal
 FNJXE    | Pump-N-Pantry Of NY          | Meat & Seafood
 FNJXE    | Pump-N-Pantry Of NY          | Pet Care
 FX0RG    | 6-Twelve Convenient-Mart Inc | Baby Care
 FX0RG    | 6-Twelve Convenient-Mart Inc | Bread & Bakery
 FX0RG    | 6-Twelve Convenient-Mart Inc | Canned Goods & Soups
 FX0RG    | 6-Twelve Convenient-Mart Inc | Frozen Foods
 FX0RG    | 6-Twelve Convenient-Mart Inc | Fruits & Vegetables
 FX0RG    | 6-Twelve Convenient-Mart Inc | Meat & Seafood
(17 rows)

-- Problem H --
-- Your boss would like to know the top five store categories (i.e.,thefivecategories that appear the most frequently as a store category) 
-- as well as the number of stores that include each such category and the minimum, maximum, 
-- and average list prices of the products in each such category.
WITH category_count AS (
SELECT category, COUNT (DISTINCT s.store_id) as num_stores
FROM stores s, UNNEST(string_to_array(s.categories, ', ')) as category
GROUP BY category
ORDER BY num_stores DESC
LIMIT 5
)
SELECT cc.category, cc.num_stores, MIN(p.list_price), MAX(p.list_price), AVG(p.list_price)
FROM category_count AS cc, products AS p
WHERE cc.category = p.category
GROUP BY cc.category, cc.num_stores
ORDER BY cc.num_stores DESC
;
        category         | num_stores | min  |  max  |         avg         
-------------------------+------------+------+-------+---------------------
 Canned Goods & Soups    |        254 | 0.99 |  4.29 |  2.4960606060606061
 Pet Care                |        250 | 0.99 | 28.29 | 14.8733333333333333
 Grains & Pasta & Sides  |        249 | 0.99 | 21.99 |  4.3429411764705882
 Paper & Cleaning & Home |        246 | 1.99 | 19.99 |  8.6305405405405405
 Breakfast & Cereal      |        245 | 3.29 | 10.99 |  5.5568965517241379
(5 rows)

-- Problem I --
-- Suppose your boss wants to identify orders totalling more than $650 in an effort to identify high-value customers. 
-- How many orders have a total price greater than $650? While you are working on this query, 
-- use the EXPLAIN ANALYZE command to explore PostgreSQL’s view of the statistics for the query. 
-- How selective is this requirement? And how long does this query actually take to run?
SELECT COUNT(*)
FROM orders o 
WHERE o.total_price > 650
;
 count 
-------
     4
(1 row)

EXPLAIN (ANALYZE TRUE)
SELECT COUNT(*)
FROM orders o 
WHERE o.total_price > 650
;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=365.56..365.57 rows=1 width=8) (actual time=5.925..5.926 rows=1 loops=1)
   ->  Seq Scan on orders o  (cost=0.00..358.15 rows=2964 width=0) (actual time=1.046..5.917 rows=4 loops=1)
         Filter: (total_price > '650'::numeric)
         Rows Removed by Filter: 19996
 Planning Time: 0.061 ms
 Execution Time: 5.961 ms
(6 rows)

-- Answers to Question
/*
It is selective because it selects 4 rows out of 20000. It take about 7.078ms to run
*/
-- Problem J --
-- We would like to do some clean-up in order to ensure the consistency of our data. 
-- In particular, we want to make sure that the total price on record for each order is accurate. 
-- (Your boss heard a rumor that one of the application’s web developers may have skipped CS122B.) 
-- Some orders have inconsistencies between the recorded total price and the sum of the items’ prices. 
-- Write a query to identify the offending orders and to report the number of such orders. 
-- Once you have done that, write and run an update query to fix the incorrect total prices.
WITH 
order_price AS (
SELECT oi.order_id, SUM(oi.qty * oi.selling_price) AS total_price
FROM orderitems oi
GROUP BY oi.order_id
),
inconsistent_order_price AS (
SELECT o.order_id, op.total_price
FROM order_price op, orders o
WHERE op.order_id = o.order_id AND op.total_price != o.total_price
)
 
UPDATE orders
SET total_price = iop.total_price
FROM inconsistent_order_price iop
WHERE orders.order_id = iop.order_id
;
UPDATE 5
-- Problem K --
-- With the correct total prices in place, create an index on the total price column 
-- and run query I and use the EXPLAIN ANALYZE command once again. 
-- Compare the query’s running time with and without the index and briefly 
-- state what you think the main reason(s) for any running time difference is.
CREATE INDEX idx_total_price ON orders(total_price);
CREATE INDEX
SELECT COUNT(*)
FROM orders o 
WHERE o.total_price > 650
;
 count 
-------
     4
(1 row)

EXPLAIN (ANALYZE TRUE)
SELECT COUNT(*)
FROM orders o 
WHERE o.total_price > 650
;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=478.96..478.97 rows=1 width=8) (actual time=0.026..0.027 rows=1 loops=1)
   ->  Bitmap Heap Scan on orders o  (cost=131.96..462.29 rows=6667 width=0) (actual time=0.017..0.022 rows=4 loops=1)
         Recheck Cond: (total_price > '650'::numeric)
         Heap Blocks: exact=4
         ->  Bitmap Index Scan on idx_total_price  (cost=0.00..130.29 rows=6667 width=0) (actual time=0.012..0.012 rows=4 loops=1)
               Index Cond: (total_price > '650'::numeric)
 Planning Time: 0.070 ms
 Execution Time: 0.054 ms
(8 rows)

-- Answers to Question
/*
The running time is 0.164 ms, it is much faster than without index.
The main reason is that after index, the total_price are sorted and stored in some kind of data structure(default is btree).
So it is much quicker to find the total_price that are > 650
*/
-- Problem L -- 
-- Your boss is developing a shopper hiring plan and would like you to provide a thorough aggregation of store locations. 
-- Use the ROLLUP operator of PostgreSQL to show the total number of stores for each (state, city, zip code) combination. 
-- Read the “Advanced Aggregation in SQL” handout on the course wiki for more information about how to formulate this kind of query. 
-- Sort the results in descending order of (state, city, zip code) and print the first 20 rows.
SELECT state, city, zip_code, COUNT(store_id) AS num_store
FROM stores
GROUP BY ROLLUP(state, city, zip_code)
ORDER BY (state, city, zip_code) DESC
LIMIT 20
;
 state |     city     | zip_code | num_store 
-------+--------------+----------+-----------
       |              |          |       400
 WV    |              |          |         8
 WV    | Sistersville |          |         1
 WV    | Sistersville | 26175    |         1
 WV    | Lerona       |          |         1
 WV    | Lerona       | 25971    |         1
 WV    | Huntington   |          |         1
 WV    | Huntington   | 25774    |         1
 WV    | Glenwood     |          |         1
 WV    | Glenwood     | 25520    |         1
 WV    | Follansbee   |          |         1
 WV    | Follansbee   | 26037    |         1
 WV    | Elkhorn      |          |         1
 WV    | Elkhorn      | 24831    |         1
 WV    | Charleston   |          |         1
 WV    | Charleston   | 25311    |         1
 WV    | Bomont       |          |         1
 WV    | Bomont       | 25030    |         1
 WI    |              |          |         9
 WI    | Ripon        |          |         1
(20 rows)

-- Problem M (extra credit) --                                                                     
-- [Extra Credit] A new analytical request has been given to you from your boss: For each category, 
-- rank the products in that category in descending order of their list prices. 
-- Use SQL’s window-based aggregation (i.e., the OVER clause) to find the ranks. 
-- Print out the product IDs, product names, categories, list prices, and ranks.
-- Read the “Advanced Aggregation in SQL” handout on the course wiki for more information about window queries in SQL. 
-- Print the first 10 rows.
SELECT p.product_id, p.name, p.category, p.list_price, RANK() OVER (ORDER BY (p.list_price) DESC)
FROM products p
LIMIT 10
;
 product_id |                                             name                                              |        category        | list_price | rank 
------------+-----------------------------------------------------------------------------------------------+------------------------+------------+------
 A0LI2      | Buitoni Basil Pesto Pasta Sauce - 7 Oz.                                                       | Grains & Pasta & Sides |            |    1
 BRYPX      | waterfront BISTRO Salmon Fillets Wild Alaskin Pink Boneless & Skin On - 32 Oz                 | Meat & Seafood         |            |    1
 93NRR      | Quaker Oatmeal Instant Flavor Variety - 10-1.51 Oz                                            | Breakfast & Cereal     |            |    1
 5YV6H      | Coffeemate Coffee Creamer Original - 35.3 Oz                                                  | Beverages              |            |    1
 8YAY3      | Lucerne Farms Eggs Large - 12 Count                                                           | Dairy & Eggs & Cheese  |            |    1
 FJZQE      | Rosarita Beans Refried Traditional Can - 16 Oz                                                | Canned Goods & Soups   |            |    1
 X0401      | USDA Choice Beef Ribeye Roast Bone In - 6 Lbs. (approx. weight)                               | Meat & Seafood         |      59.94 |    7
 HW481      | USDA Choice Beef Top Loin New York Strip Steak Bone In Value Pack - 3.5 Lbs. (approx. weight) | Meat & Seafood         |      34.97 |    8
 Y7KB7      | Pull-Ups Training Pants Learning Designs 4T-5T Day & Night Disney Pixar - 56 Count            | Baby Care              |      32.99 |    9
 4S9UJ      | Cesar Classics Canine Cuisine 4 Assorted Flavors Box - 24-3.5 Oz                              | Pet Care               |      28.29 |   10
(10 rows)

			
